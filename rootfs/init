#!/bin/bash

#------------------------------------------------------------------------------
# Install SSL certificates:
#------------------------------------------------------------------------------

[ "${SSL_TRUST}" ] && {

  IFS=',' read -ra ADDR <<< "${SSL_TRUST}"

  # For each URL:
  for i in "${ADDR[@]}"; do

    # Set variables:
    ALIAS=$(echo ${i} | tr .: _)

    # Get the remote certificate:
    echo "[init] Downloading ${ALIAS} certificate..."
    echo | openssl s_client -showcerts -connect ${i} 2>/dev/null | \
    sed -n '/-BEGIN/,/-END/ p' > /tmp/${ALIAS}.crt

    # Verify we have something usable:
    grep -q CERTIFICATE /tmp/${ALIAS}.crt && {

      # Import the certificate (system):
      echo "[init] Importing ${ALIAS} certificate (system)..."
      cd /usr/local/share/ca-certificates
      awk '{print $0 "-----END CERTIFICATE-----" > "cert-"NR".crt"}' \
        RS='-----END CERTIFICATE-----' /tmp/${ALIAS}.crt
      rm -f $(ls cert-* | tail -n1) && update-ca-certificates

    } || echo "[init] Ops! Cannot retrieve the ${ALIAS} certificate"

  done
}

#------------------------------------------------------------------------------
# Configure the service:
#------------------------------------------------------------------------------

CONFIG_DIR='/etc/docker/registry'

[ "${ENDPOINT_NAME}" ] && {

  CONFIG_FILE='06-notifications.yml'
  mv ${CONFIG_DIR}/.${CONFIG_FILE} ${CONFIG_DIR}/${CONFIG_FILE}
  CONFIG_FILE=${CONFIG_DIR}/${CONFIG_FILE}

  sed -i "s#XXX-ENDPOINT_NAME-XXX#${ENDPOINT_NAME}#" ${CONFIG_FILE}

  [ "${ENDPOINT_URL}" ] || { echo 'Ops! ENDPOINT_URL must exist'; exit 1; }
  sed -i "s#XXX-ENDPOINT_URL-XXX#${ENDPOINT_URL}#" ${CONFIG_FILE}

  ENDPOINT_TIMEOUT="${ENDPOINT_TIMEOUT:-500}" && \
  sed -i "s#XXX-ENDPOINT_TIMEOUT-XXX#${ENDPOINT_TIMEOUT}#" ${CONFIG_FILE}

  ENDPOINT_THRESHOLD="${ENDPOINT_THRESHOLD:-5}" && \
  sed -i "s#XXX-ENDPOINT_THRESHOLD-XXX#${ENDPOINT_THRESHOLD}#" ${CONFIG_FILE}

  ENDPOINT_BACKOFF="${ENDPOINT_BACKOFF:-1}" && \
  sed -i "s#XXX-ENDPOINT_BACKOFF-XXX#${ENDPOINT_BACKOFF}#" ${CONFIG_FILE}
}

[ "${REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY}" ] && {
  [ -d ${REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY} ] || \
    mkdir -p ${REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY}
}

#------------------------------------------------------------------------------
# Run:
#------------------------------------------------------------------------------

cat ${CONFIG_DIR}/*
cat ${CONFIG_DIR}/* > ${CONFIG_DIR}/config.yml
exec registry serve ${CONFIG_DIR}/config.yml
